name: Claude Code Review

on:
  pull_request:
    types: [opened, ready_for_review] # Run on initial PR creation and when marked ready
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

  # Also trigger when someone comments '@claude review' on a PR
  issue_comment:
    types: [created]

jobs:
  claude-review:
    # Only run if:
    # 1. It's a new non-draft PR (opened event), OR
    # 2. A draft PR is marked as ready for review, OR
    # 3. It's a comment on a PR that contains '@claude review'
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.draft == false) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '@claude review'))

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Get PR details for issue_comment events
        if: github.event_name == 'issue_comment'
        id: pr-details
        run: |
          PR_URL="${{ github.event.issue.pull_request.url }}"
          echo "Fetching PR details from: $PR_URL"

          # Fetch PR data with error handling
          if ! PR_DATA=$(curl -s -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PR_URL"); then
            echo "Error: Failed to fetch PR data from GitHub API"
            exit 1
          fi

          # Validate the API response contains valid JSON
          if ! echo "$PR_DATA" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON response from GitHub API"
            echo "Response: $PR_DATA"
            exit 1
          fi

          # Extract head ref and sha with validation
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref // empty')
          HEAD_SHA=$(echo "$PR_DATA" | jq -r '.head.sha // empty')

          # Validate that required fields are not empty
          if [[ -z "$HEAD_REF" || "$HEAD_REF" == "null" ]]; then
            echo "Error: Could not extract head.ref from PR data"
            exit 1
          fi

          if [[ -z "$HEAD_SHA" || "$HEAD_SHA" == "null" ]]; then
            echo "Error: Could not extract head.sha from PR data"
            exit 1
          fi

          echo "Successfully extracted PR details: ref=$HEAD_REF, sha=$HEAD_SHA"
          echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For pull_request events, checkout the PR head
          # For issue_comment events, checkout the PR head ref from the API call above
          ref: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.sha) || (github.event_name == 'issue_comment' && steps.pr-details.outputs.head_sha) }}
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_bots: "codegen-sh"

          # Allow codegen-sh bot to trigger the workflow
          allowed_bots: "codegen-sh"

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Direct prompt for automated review
          # Note: This review runs automatically on:
          # - New non-draft PRs
          # - When draft PRs are marked as ready for review
          # - When someone comments '@claude review'
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')
