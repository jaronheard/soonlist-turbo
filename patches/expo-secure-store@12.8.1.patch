diff --git a/ios/SecureStoreModule.swift b/ios/SecureStoreModule.swift
index 593fb9f30b91172e6f795b147ba9e1f934099b80..9a1c87ec781272695ea7342a0f1d1184f9ac5eaf 100644
--- a/ios/SecureStoreModule.swift
+++ b/ios/SecureStoreModule.swift
@@ -8,12 +8,14 @@ public final class SecureStoreModule: Module {
 
     Constants([
       "AFTER_FIRST_UNLOCK": SecureStoreAccessible.afterFirstUnlock.rawValue,
-      "AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY": SecureStoreAccessible.afterFirstUnlockThisDeviceOnly.rawValue,
+      "AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY": SecureStoreAccessible.afterFirstUnlockThisDeviceOnly
+        .rawValue,
       "ALWAYS": SecureStoreAccessible.always.rawValue,
-      "WHEN_PASSCODE_SET_THIS_DEVICE_ONLY": SecureStoreAccessible.whenPasscodeSetThisDeviceOnly.rawValue,
+      "WHEN_PASSCODE_SET_THIS_DEVICE_ONLY": SecureStoreAccessible.whenPasscodeSetThisDeviceOnly
+        .rawValue,
       "ALWAYS_THIS_DEVICE_ONLY": SecureStoreAccessible.alwaysThisDeviceOnly.rawValue,
       "WHEN_UNLOCKED": SecureStoreAccessible.whenUnlocked.rawValue,
-      "WHEN_UNLOCKED_THIS_DEVICE_ONLY": SecureStoreAccessible.whenUnlockedThisDeviceOnly.rawValue
+      "WHEN_UNLOCKED_THIS_DEVICE_ONLY": SecureStoreAccessible.whenUnlockedThisDeviceOnly.rawValue,
     ])
 
     AsyncFunction("getValueWithKeyAsync") { (key: String, options: SecureStoreOptions) -> String? in
@@ -24,7 +26,8 @@ public final class SecureStoreModule: Module {
       return try get(with: key, options: options)
     }
 
-    AsyncFunction("setValueWithKeyAsync") { (value: String, key: String, options: SecureStoreOptions) -> Bool in
+    AsyncFunction("setValueWithKeyAsync") {
+      (value: String, key: String, options: SecureStoreOptions) -> Bool in
       guard let key = validate(for: key) else {
         throw InvalidKeyException()
       }
@@ -32,7 +35,8 @@ public final class SecureStoreModule: Module {
       return try set(value: value, with: key, options: options)
     }
 
-    Function("setValueWithKeySync") {(value: String, key: String, options: SecureStoreOptions) -> Bool in
+    Function("setValueWithKeySync") {
+      (value: String, key: String, options: SecureStoreOptions) -> Bool in
       guard let key = validate(for: key) else {
         throw InvalidKeyException()
       }
@@ -56,11 +60,15 @@ public final class SecureStoreModule: Module {
       throw InvalidKeyException()
     }
 
-    if let unauthenticatedItem = try searchKeyChain(with: key, options: options, requireAuthentication: false) {
+    if let unauthenticatedItem = try searchKeyChain(
+      with: key, options: options, requireAuthentication: false)
+    {
       return String(data: unauthenticatedItem, encoding: .utf8)
     }
 
-    if let authenticatedItem = try searchKeyChain(with: key, options: options, requireAuthentication: true) {
+    if let authenticatedItem = try searchKeyChain(
+      with: key, options: options, requireAuthentication: true)
+    {
       return String(data: authenticatedItem, encoding: .utf8)
     }
 
@@ -72,7 +80,8 @@ public final class SecureStoreModule: Module {
   }
 
   private func set(value: String, with key: String, options: SecureStoreOptions) throws -> Bool {
-    var setItemQuery = query(with: key, options: options, requireAuthentication: options.requireAuthentication)
+    var setItemQuery = query(
+      with: key, options: options, requireAuthentication: options.requireAuthentication)
 
     let valueData = value.data(using: .utf8)
     setItemQuery[kSecValueData as String] = valueData
@@ -85,7 +94,8 @@ public final class SecureStoreModule: Module {
       guard let _ = Bundle.main.infoDictionary?["NSFaceIDUsageDescription"] as? String else {
         throw MissingPlistKeyException()
       }
-      let accessOptions = SecAccessControlCreateWithFlags(kCFAllocatorDefault, accessibility, SecAccessControlCreateFlags.biometryCurrentSet, nil)
+      let accessOptions = SecAccessControlCreateWithFlags(
+        kCFAllocatorDefault, accessibility, SecAccessControlCreateFlags.biometryCurrentSet, nil)
       setItemQuery[kSecAttrAccessControl as String] = accessOptions
     }
 
@@ -95,7 +105,9 @@ public final class SecureStoreModule: Module {
     case errSecSuccess:
       // On success we want to remove the other key alias and legacy key (if they exist) to avoid conflicts during reads
       SecItemDelete(query(with: key, options: options) as CFDictionary)
-      SecItemDelete(query(with: key, options: options, requireAuthentication: !options.requireAuthentication) as CFDictionary)
+      SecItemDelete(
+        query(with: key, options: options, requireAuthentication: !options.requireAuthentication)
+          as CFDictionary)
       return true
     case errSecDuplicateItem:
       return try update(value: value, with: key, options: options)
@@ -105,7 +117,8 @@ public final class SecureStoreModule: Module {
   }
 
   private func update(value: String, with key: String, options: SecureStoreOptions) throws -> Bool {
-    var query = query(with: key, options: options, requireAuthentication: options.requireAuthentication)
+    var query = query(
+      with: key, options: options, requireAuthentication: options.requireAuthentication)
 
     let valueData = value.data(using: .utf8)
     let updateDictionary = [kSecValueData as String: valueData]
@@ -123,7 +136,9 @@ public final class SecureStoreModule: Module {
     }
   }
 
-  private func searchKeyChain(with key: String, options: SecureStoreOptions, requireAuthentication: Bool? = nil) throws -> Data? {
+  private func searchKeyChain(
+    with key: String, options: SecureStoreOptions, requireAuthentication: Bool? = nil
+  ) throws -> Data? {
     var query = query(with: key, options: options, requireAuthentication: requireAuthentication)
 
     query[kSecMatchLimit as String] = kSecMatchLimitOne
@@ -149,7 +164,9 @@ public final class SecureStoreModule: Module {
     }
   }
 
-  private func query(with key: String, options: SecureStoreOptions, requireAuthentication: Bool? = nil) -> [String: Any] {
+  private func query(
+    with key: String, options: SecureStoreOptions, requireAuthentication: Bool? = nil
+  ) -> [String: Any] {
     var service = options.keychainService ?? "app"
     if let requireAuthentication {
       service.append(":\(requireAuthentication ? "auth" : "no-auth")")
@@ -161,7 +178,8 @@ public final class SecureStoreModule: Module {
       kSecClass as String: kSecClassGenericPassword,
       kSecAttrService as String: service,
       kSecAttrGeneric as String: encodedKey,
-      kSecAttrAccount as String: encodedKey
+      kSecAttrAccount as String: encodedKey,
+      kSecAttrAccessGroup as String: options.sharedAccessGroupIdentifier,
     ]
   }
 
diff --git a/ios/SecureStoreOptions.swift b/ios/SecureStoreOptions.swift
index 8cc104f35b43669d67cb5020fca9295bbe2b5a43..45da2f090e1169dd728e9213da273580f61cbd5a 100644
--- a/ios/SecureStoreOptions.swift
+++ b/ios/SecureStoreOptions.swift
@@ -12,4 +12,7 @@ internal struct SecureStoreOptions: Record {
 
   @Field
   var requireAuthentication: Bool
+
+  @Field
+  var sharedAccessGroupIdentifier: String?
 }
